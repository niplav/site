#!/usr/bin/env node

const mjpage = require('mathjax-node-page').mjpage;
const fs = require('fs');

if (process.argv.length !== 3) {
    console.error('Usage: prerender-mathjax <html-file>');
    process.exit(1);
}

const filename = process.argv[2];

try {
    let html = fs.readFileSync(filename, 'utf8');

    // Pre-process: Convert inline math in code blocks to regular inline math
    // Transform <code>$...$</code> to just $...$ and <div>$$...$$</div> to <div>$$...$$</div>

    // Step 1: Extract and replace math blocks with placeholders in one pass
    const mathBlocks = [];
    html = html.replace(/<code>\$([^]*?)\$<\/code>|<div>(\s*)\$\$([^]*?)\$\$(\s*)<\/div>/g, function(match, inlineContent, preDiv, displayContent, postDiv) {
        if (inlineContent !== undefined) {
            // Inline math: <code>$...$</code>
            if (inlineContent.indexOf('</code>') === -1) {
                const placeholder = `__MATH_${mathBlocks.length}__`;
                mathBlocks.push(`$${inlineContent}$`);
                return placeholder;
            }
            return match; // Return unchanged if it contains </code>
        } else {
            // Display math: <div>$$...$$</div> - preserve div wrapper for indenting
            const placeholder = `__MATH_${mathBlocks.length}__`;
            mathBlocks.push(`<div>${preDiv}$$${displayContent}$$${postDiv}</div>`);
            return placeholder;
        }
    });

    // Step 2: Escape all remaining $ symbols (but not already escaped ones)
    html = html.replace(/(?<!\\)\$/g, '\\$');

    // Step 3: Restore math blocks (single replace with all placeholders)
    html = html.replace(/__MATH_(\d+)__/g, (match, index) => mathBlocks[parseInt(index)]);

    mjpage(html, {
        format: ["TeX"],
        singleDollars: true,
        removeJax: true
    }, {
        svg: true,
        useGlobalCache: true,
        linebreaks: true,
        MathJax: {
            tex2jax: {
                skipTags: []
            }
        }
    }, function(output) {
        try {
            fs.writeFileSync(filename, output);
        } catch (err) {
            console.error(`Error writing file ${filename}:`, err.message);
            process.exit(1);
        }
    });
} catch (err) {
    console.error(`Error reading file ${filename}:`, err.message);
    process.exit(1);
}