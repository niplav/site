/*
Generated by Squiggle AI. Workflow ID: 0f56af75-62c0-4c91-8d65-3d165bedc7da
*/
import "hub:ozziegooen/sTest" as sTest

// Cost-Benefit Analysis: Vasectomy Decision Model
// This model compares three scenarios: vasectomy with sperm freezing,
// vasectomy without freezing, and no vasectomy

@name("Input Parameters")
@doc("Key parameters with uncertainty ranges for the cost-benefit analysis")
inputs = {
  @name("Chance of wanting children later (%)")
  @format(".1%")
  chanceWantingChildren = 4% to 10%

  @name("Number of future sexual encounters")
  sexOccasions = 50 to 500

  @name("Proportion of times could go raw (%)")
  @format(".1%")
  proportionRaw = 40% to 65%

  @name("Value of cumming inside (€)")
  @format(",.0f")
  valueCummingInside = 50 to 150

  @name("Raw experience multiplier")
  rawMultiplier = 1.5 to 2.0

  @name("Cost of unwanted child (€)")
  @format(",.0f")
  costUnwantedChild = normal({ p5: -120k, p95: -20k })

  @name("Cost of missing desired child (€)")
  @format(",.0f")
  costMissingDesiredChild = normal({ p5: -300k, p95: -50k })

  @name("Cost of vasectomy reversal (€)")
  @format(",.0f")
  costVasectomyReversal = 3k to 5k

  @name("Chance of successful reversal (%)")
  @format(".1%")
  chanceSuccessfulReversal = 50% to 75%

  @name("Cost of IVF per child (€)")
  @format(",.0f")
  costIVF = 10k to 15k

  @name("IVF child desirability multiplier")
  ivfDesirabilityMultiplier = 1.0 to 1.8

  @name("Chance of pregnancy per encounter (%)")
  @format(".2%")
  chancePregnancyPerSex = 0.2% to 0.5%

  @name("Peace of mind value per sex (€)")
  @format(",.0f")
  peaceOfMindValue = 5 to 15

  @name("Child support per year (€)")
  @format(",.0f")
  childSupportPerYear = 5000 to 6000

  @name("Years of child support")
  childSupportYears = 18

  @name("Cost of vasectomy (€)")
  @format(",.0f")
  costVasectomy = 800 to 1200

  @name("Initial cost of freezing sperm (€)")
  @format(",.0f")
  initialCostFreezingSperm = 1000 to 1200

  @name("Annual storage cost for frozen sperm (€)")
  @format(",.0f")
  annualStorageCost = 220 to 260

  @name("Years of storage")
  storageYears = 25

  {
    chanceWantingChildren,
    sexOccasions,
    proportionRaw,
    valueCummingInside,
    rawMultiplier,
    costUnwantedChild,
    costMissingDesiredChild,
    costVasectomyReversal,
    chanceSuccessfulReversal,
    costIVF,
    ivfDesirabilityMultiplier,
    chancePregnancyPerSex,
    peaceOfMindValue,
    childSupportPerYear,
    childSupportYears,
    costVasectomy,
    initialCostFreezingSperm,
    annualStorageCost,
    storageYears,
  }
}

@name("Fixed Costs")
fixedCosts = {
  @name("Vasectomy Cost (€)")
  @format(",.0f")
  vasectomy = inputs.costVasectomy

  @name("Total Cost of Freezing Sperm (€)")
  @format(",.0f")
  freezingSperm = inputs.initialCostFreezingSperm +
    inputs.annualStorageCost * inputs.storageYears

  { vasectomy, freezingSperm }
}

@name("Scenario 1: Vasectomy with Sperm Freezing")
scenario1 = {
  // Fixed costs
  initialCosts = fixedCosts.vasectomy + fixedCosts.freezingSperm

  // Benefits from raw sex
  numRawSex = inputs.sexOccasions * inputs.proportionRaw
  rawSexValue = numRawSex * inputs.valueCummingInside * inputs.rawMultiplier

  // Peace of mind benefit
  peaceOfMindBenefit = inputs.sexOccasions * inputs.peaceOfMindValue

  // Child-related outcomes
  wantedChildCost = if mean(inputs.chanceWantingChildren) > 0 then {
    // If want children, use IVF with frozen sperm
    costToHaveChild = inputs.costIVF
    // Desirability multiplier improves IVF outcomes (reduces the negative value)
    adjustedDesiredChildValue = inputs.costMissingDesiredChild *
      inputs.ivfDesirabilityMultiplier
    inputs.chanceWantingChildren * (adjustedDesiredChildValue - costToHaveChild)
  } else 0

  // No unwanted children
  unwantedChildCost = 0

  // Total value
  totalValue = rawSexValue + peaceOfMindBenefit + wantedChildCost - initialCosts

  {
    initialCosts: initialCosts,
    rawSexValue: rawSexValue,
    peaceOfMindBenefit: peaceOfMindBenefit,
    wantedChildCost: wantedChildCost,
    unwantedChildCost: unwantedChildCost,
    totalValue: totalValue,
  }
}

@name("Scenario 2: Vasectomy without Sperm Freezing")
scenario2 = {
  // Fixed costs
  initialCosts = fixedCosts.vasectomy

  // Benefits from raw sex
  numRawSex = inputs.sexOccasions * inputs.proportionRaw
  rawSexValue = numRawSex * inputs.valueCummingInside * inputs.rawMultiplier

  // Peace of mind benefit
  peaceOfMindBenefit = inputs.sexOccasions * inputs.peaceOfMindValue

  // Child-related outcomes
  wantedChildCost = if mean(inputs.chanceWantingChildren) > 0 then {
    // If want children, try reversal first, then IVF if needed
    reversalCost = inputs.costVasectomyReversal
    costWithSuccessfulReversal = 0
    costWithFailedReversal = inputs.costIVF

    // Expected cost based on reversal success rate
    expectedCost = inputs.chanceSuccessfulReversal *
      costWithSuccessfulReversal +
      (1 - inputs.chanceSuccessfulReversal) * costWithFailedReversal +
      reversalCost

    // Value of having desired child less the costs
    // Desirability multiplier improves IVF outcomes (reduces the negative value)
    adjustedDesiredChildValue = inputs.costMissingDesiredChild *
      inputs.ivfDesirabilityMultiplier
    inputs.chanceWantingChildren * (adjustedDesiredChildValue - expectedCost)
  } else 0

  // No unwanted children
  unwantedChildCost = 0

  // Total value
  totalValue = rawSexValue + peaceOfMindBenefit + wantedChildCost - initialCosts

  {
    initialCosts: initialCosts,
    rawSexValue: rawSexValue,
    peaceOfMindBenefit: peaceOfMindBenefit,
    wantedChildCost: wantedChildCost,
    unwantedChildCost: unwantedChildCost,
    totalValue: totalValue,
  }
}

@name("Scenario 3: No Vasectomy")
scenario3 = {
  // No fixed costs
  initialCosts = 0

  // Benefits from raw sex - note we add risk of unwanted pregnancy into this
  numRawSex = inputs.sexOccasions * inputs.proportionRaw
  rawSexValue = numRawSex * inputs.valueCummingInside * inputs.rawMultiplier

  // No peace of mind benefit (risk of pregnancy exists)
  peaceOfMindBenefit = 0

  // Child-related outcomes
  // No cost for wanted children since natural conception is possible
  wantedChildCost = 0

  // Risk of unwanted children
  chanceOfUnwantedPregnancy = 1 - (1 - inputs.chancePregnancyPerSex) ^ numRawSex
  childSupportTotal = inputs.childSupportPerYear * inputs.childSupportYears
  unwantedChildValue = inputs.costUnwantedChild - childSupportTotal
  unwantedChildCost = (1 - inputs.chanceWantingChildren) *
    chanceOfUnwantedPregnancy *
    unwantedChildValue

  // Total value
  totalValue = rawSexValue + peaceOfMindBenefit + wantedChildCost +
    unwantedChildCost -
    initialCosts

  {
    initialCosts: initialCosts,
    rawSexValue: rawSexValue,
    peaceOfMindBenefit: peaceOfMindBenefit,
    wantedChildCost: wantedChildCost,
    unwantedChildCost: unwantedChildCost,
    chanceOfUnwantedPregnancy: chanceOfUnwantedPregnancy,
    totalValue: totalValue,
  }
}

@name("Comparison of All Scenarios")
comparison = {
  @name("Scenario 1: Vasectomy with Sperm Freezing (€)")
  @format(",.0f")
  s1 = scenario1.totalValue

  @name("Scenario 2: Vasectomy without Sperm Freezing (€)")
  @format(",.0f")
  s2 = scenario2.totalValue

  @name("Scenario 3: No Vasectomy (€)")
  @format(",.0f")
  s3 = scenario3.totalValue

  @name("Best Option")
  bestOption = if mean(s1) > mean(s2) &&
    mean(s1) >
      mean(s3) then "Scenario 1: Vasectomy with Sperm Freezing" else if mean(
    s2
  ) >
    mean(s1) &&
    mean(s2) >
      mean(
        s3
      ) then "Scenario 2: Vasectomy without Sperm Freezing" else "Scenario 3: No Vasectomy"

  { s1, s2, s3, bestOption }
}

// Testing the model
model_tests = sTest.describe(
  "Vasectomy Decision Model Tests",
  [
    sTest.test(
      "fixed costs are positive",
      {
        ||
        sTest.expect(
          mean(fixedCosts.vasectomy + fixedCosts.freezingSperm)
        ).toBeGreaterThan(
          0
        )
      }
    ),
    sTest.test(
      "raw sex has positive value",
      {|| sTest.expect(mean(scenario1.rawSexValue)).toBeGreaterThan(0)}
    ),
    sTest.test(
      "chance of pregnancy increases with more sex",
      {
        ||
        moreRawSex = inputs.sexOccasions * 2 * inputs.proportionRaw
        chanceWithMoreSex = 1 - (1 - inputs.chancePregnancyPerSex) ^ moreRawSex
        sTest.expect(mean(chanceWithMoreSex)).toBeGreaterThan(
          mean(scenario3.chanceOfUnwantedPregnancy)
        )
      }
    ),
  ]
)

@notebook
@startOpen
summary = [
  "# Vasectomy Decision Analysis
",
  "This model evaluates three different strategies regarding vasectomy and sperm freezing, considering both monetary and non-monetary factors.
",
  "## Key Findings
",
  "The best option based on expected value is: **" + comparison.bestOption +
    "**
",
  "## Expected Values of Each Scenario
",
  "1. **Vasectomy with Sperm Freezing**: " +
    String(mean(comparison.s1), ",.0f") +
    " (Range: " +
    String(Dist.inv(comparison.s1, 0.05), ",.0f") +
    " to " +
    String(Dist.inv(comparison.s1, 0.95), ",.0f") +
    ")
",
  "2. **Vasectomy without Sperm Freezing**: " +
    String(mean(comparison.s2), ",.0f") +
    " (Range: " +
    String(Dist.inv(comparison.s2, 0.05), ",.0f") +
    " to " +
    String(Dist.inv(comparison.s2, 0.95), ",.0f") +
    ")
",
  "3. **No Vasectomy**: " + String(mean(comparison.s3), ",.0f") + " (Range: " +
    String(Dist.inv(comparison.s3, 0.05), ",.0f") +
    " to " +
    String(Dist.inv(comparison.s3, 0.95), ",.0f") +
    ")
",
  Plot.dists({
    dists: [
      { name: "Vasectomy + Freezing", value: comparison.s1 },
      { name: "Vasectomy Only", value: comparison.s2 },
      { name: "No Vasectomy", value: comparison.s3 },
    ],
  scale: Scale.symlog()}
  ),
  "
## Key Scenario Details
",
  "### Scenario 1: Vasectomy with Sperm Freezing
",
  "- Initial Costs: " + String(mean(scenario1.initialCosts), ",.0f") + "
",
  "- Raw Sex Value: " + String(mean(scenario1.rawSexValue), ",.0f") + "
",
  "- Peace of Mind Benefit: " +
    String(mean(scenario1.peaceOfMindBenefit), ",.0f") +
    "
",
  "- Child-Related Value: " + String(mean(scenario1.wantedChildCost), ",.0f") +
    "
",
  "
### Scenario 2: Vasectomy without Sperm Freezing
",
  "- Initial Costs: " + String(mean(scenario2.initialCosts), ",.0f") + "
",
  "- Raw Sex Value: " + String(mean(scenario2.rawSexValue), ",.0f") + "
",
  "- Peace of Mind Benefit: " +
    String(mean(scenario2.peaceOfMindBenefit), ",.0f") +
    "
",
  "- Child-Related Value: " + String(mean(scenario2.wantedChildCost), ",.0f") +
    "
",
  "
### Scenario 3: No Vasectomy
",
  "- Raw Sex Value: " + String(mean(scenario3.rawSexValue), ",.0f") + "
",
  "- Chance of Unwanted Pregnancy: " +
    String(mean(scenario3.chanceOfUnwantedPregnancy) * 100, ".1f") +
    "%
",
  "- Unwanted Child Cost: " +
    String(mean(scenario3.unwantedChildCost), ",.0f") +
    "
",
  "
## Key Drivers
",
  "- The probability of wanting children later: " +
    String(mean(inputs.chanceWantingChildren) * 100, ".1f") +
    "%
",
  "- The number of future sexual encounters: " +
    String(mean(inputs.sexOccasions), ".0f") +
    "
",
  "- The chance of pregnancy per raw sex encounter: " +
    String(mean(inputs.chancePregnancyPerSex) * 100, ".2f") +
    "%
",
  "- The cost of an unwanted child: " +
    String(mean(inputs.costUnwantedChild), ",.0f") +
    "
",
  "
## Limitations
",
  "This model simplifies complex life decisions and doesn't account for emotional factors, relationship dynamics, or changes in preferences over time. The results should be considered as one input among many when making this personal decision.",
]
